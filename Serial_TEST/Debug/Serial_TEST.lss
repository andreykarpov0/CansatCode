
Serial_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6b  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000963  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042f  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001b48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000474  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d1  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002235  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	3e c0       	rjmp	.+124    	; 0x118 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>

#include "MySerial.h"

int main(void) {
	Serial_Begin();
  9e:	2a d0       	rcall	.+84     	; 0xf4 <Serial_Begin>
	
	uint8_t num = 98;
	Serial_Write_char(num);
  a0:	82 e6       	ldi	r24, 0x62	; 98
  a2:	36 d0       	rcall	.+108    	; 0x110 <Serial_Write_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	80 e7       	ldi	r24, 0x70	; 112
  a8:	92 e0       	ldi	r25, 0x02	; 2
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x16>
	_delay_ms(100);
	Serial_Write_char(num);
  b4:	00 00       	nop
  b6:	82 e6       	ldi	r24, 0x62	; 98
  b8:	2b d0       	rcall	.+86     	; 0x110 <Serial_Write_char>
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	92 e0       	ldi	r25, 0x02	; 2
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x22>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x2c>
	_delay_ms(100);
	Serial_Write_char(num);
  ca:	00 00       	nop
  cc:	82 e6       	ldi	r24, 0x62	; 98
  ce:	20 d0       	rcall	.+64     	; 0x110 <Serial_Write_char>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	80 e7       	ldi	r24, 0x70	; 112
  d4:	92 e0       	ldi	r25, 0x02	; 2
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x38>
	_delay_ms(100);
	
    while (1) {
		num  = Serial_Read();
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x42>
  e0:	00 00       	nop
		Serial_Write_char(num);
  e2:	12 d0       	rcall	.+36     	; 0x108 <Serial_Read>
  e4:	15 d0       	rcall	.+42     	; 0x110 <Serial_Write_char>
  e6:	8f ec       	ldi	r24, 0xCF	; 207
  e8:	97 e0       	ldi	r25, 0x07	; 7
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x4c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x52>
  f0:	00 00       	nop
  f2:	f7 cf       	rjmp	.-18     	; 0xe2 <main+0x44>

000000f4 <Serial_Begin>:
	UCSR0C = (3<<UCSZ00);			/* Set frame format: 8data, 1stop bit */
}
uint8_t Serial_Available(void) {
	if ( UCSR0A & (1<<RXC0) ) { return 1; }
	return 0;
}
  f4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  f8:	83 e3       	ldi	r24, 0x33	; 51
  fa:	89 b9       	out	0x09, r24	; 9
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	8a b9       	out	0x0a, r24	; 10
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 106:	08 95       	ret

00000108 <Serial_Read>:
uint8_t Serial_Read(void) {
	while ( !(UCSR0A & (1<<RXC0)) ) /* Wait for data to be received */
 108:	5f 9b       	sbis	0x0b, 7	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <Serial_Read>
	;
	return UDR0;					/* Get and return received data from buffer */
 10c:	8c b1       	in	r24, 0x0c	; 12
}
 10e:	08 95       	ret

00000110 <Serial_Write_char>:
void Serial_Write_char(uint8_t data) {
	while ( !( UCSR0A & (1<<UDRE0)) ) /* Wait for empty transmit buffer */
 110:	5d 9b       	sbis	0x0b, 5	; 11
 112:	fe cf       	rjmp	.-4      	; 0x110 <Serial_Write_char>
	;
	UDR0 = data; /* Put data into buffer, sends the data */
 114:	8c b9       	out	0x0c, r24	; 12
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
